# version: '3.8'
services:
  # nginx:
  #   build:
  #     context: ./nginx
  #     dockerfile: Dockerfile.dev
  #   restart: always
  #   ports:
  #     - "3050:80"
  #   depends_on:
  #     - backend
  #     - frontend
  mysql:
    image: mysql:8
    container_name: mysql-auth-${NODE_ENV}
    restart: always
    volumes:
      - ${MYSQL_VOLUME_PATH}:/var/lib/mysql
      # - ${MYSQL_CONFIG_PATH}:/etc/mysql/conf.d # my.cnf 파일을 컨테이너에 복사
    command:
      - --bind-address=0.0.0.0 # MySQL 시작 시 bind-address를 0.0.0.0으로 설정
    ports:
      - ${MYSQL_OPEN_PORT}:3306
    # env_file:
    #   - .env.${NODE_ENV}
    environment:
      # - MYSQL_ROOT_HOST=mysql-auth-${NODE_ENV}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - TZ=Asia/Seoul
    networks:
      - network-auth
  redis:
    image: redis:alpine
    container_name: redis-auth-${NODE_ENV}
    restart: always
    volumes:
      - ${REDIS_VOLUME_PATH}:/data
    networks:
      - network-auth
    command: ['redis-server', '--requirepass', '${REDIS_PASSWORD}']
    ports:
      - ${REDIS_OPEN_PORT}:6379
    depends_on:
      - mysql
  server:
    image: auth-server
    container_name: server-auth-${NODE_ENV}
    build:
      context: .
      dockerfile: Dockerfile.${NODE_ENV}
    volumes:
      - ./src:/app/src
      - /app/node_modules # 익명 볼륨
    networks:
      - network-auth
    ports:
      - ${PORT}:${PORT}
      - 9229:9229 # Node.js 디버깅 포트
    env_file:
      - .env.${NODE_ENV}
    environment:
      - TZ=Asia/Seoul
    depends_on:
      - redis
      - mysql
networks:
  network-auth:
    driver: bridge
# docker-compose --env-file .env.local up
# docker-compose --env-file .env.local up --build
